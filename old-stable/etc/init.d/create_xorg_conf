#!/bin/bash

# Copyright (C) 2004-2007 Centro de Computacao Cientifica e Software Livre
# Departamento de Informatica - Universidade Federal do Parana - C3SL/UFPR
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.

# This script creates the file "xorg.conf.mdm".
# If it exists, nothing is done, unless you use the "force" option.

SBIN_INSTALL_DIR=/usr/sbin
SHARE_INSTALL_DIR=/usr/share/mdm
ETC_INSTALL_DIR=/etc/mdm
LOG_DIR=/var/log/mdm
DEBUG_LOG=$LOG_DIR/create_xorg_debug.log


DISCOVER_HEADS=$SBIN_INSTALL_DIR/discover_heads.sh
MDM_CONF=$ETC_INSTALL_DIR/mdm.conf
TEXTS=$SHARE_INSTALL_DIR/texts

XORG_CONF=/etc/X11/xorg.conf.mdm
PROC_DEVICES=/proc/bus/input/devices

source $MDM_CONF

#
# WRITE_DEBUG
#
# check if DEBUG_MULTISEAT is defined and is equals to 1. I    n this case,
# write a message in a debug file.
#
# Parameters: $1 = Text 1 to write
#             $2 = Text 2 to write (optional)
#
# Returns: nothing

function write_debug()
{
    if [[ $DEBUG_MULTISEAT -eq 1 ]]; then
        touch $DEBUG_LOG
         # write debug text to file
        echo -e "`date "+%D %R"` $1 $2\n" >> $DEBUG_LOG
    fi
} # write_debug

# 
# VERIFY_XORG_CONF
#
# this funcion verifys the existence of xorg.conf.mdm, aborting script
# in this case
#
function verify_xorg_conf()
{
    if [[ -f "$XORG_CONF" ]]; then
        echo "`basename $0`: file $XORG_CONF already exists. Skipping..." >&2
        write_debug "$XORG_CONF already exists."
        exit
    fi
} # verify_xorg_conf

#
# GENERATE_XORG_CONF
#
# this function creates xorg.conf.mdm, ajusting parameters
#
function generate_xorg_conf ()
{
    write_debug "Entering generate_xorg_conf()"
    # Static sections...
    cat ${TEXTS}/static_xorg.txt > $XORG_CONF 

    # Server flags for mono and multiseat
    if [[ $HEADS = 1 ]]; then
        cat ${TEXTS}/uma_cabeca_xorg.txt >> $XORG_CONF
    else
        cat ${TEXTS}/varias_cabecas_xorg.txt >> $XORG_CONF
    fi

    # Mouse section
    if egrep -q "^serial[0-9]$" <<< "${MOUSE_PHYS[0]}"; then
        sed -e "s/PROTOCOL/Microsoft/" \
            -e "s/DEVICE/\/dev\/ttyS${MOUSE_PHYS[0]:6:1}/" \
            ${TEXTS}/mouse_xorg.txt >> $XORG_CONF
    else
        sed -e "s/PROTOCOL/ImPS\/2/" \
            -e "s/DEVICE/\/dev\/input\/mice/" \
            ${TEXTS}/mouse_xorg.txt >> $XORG_CONF
    fi

    # Keyboard section
    sed -e "s/KBD_RULES/$KBD_RULES/" \
        -e "s/KBD_MODEL/$KBD_MODEL/" \
        -e "s/KBD_LAYOUT/$KBD_LAYOUT/" \
        ${TEXTS}/teclado_xorg.txt >> $XORG_CONF

    # video cards section
    if [[ "${VIDEO_IDS}" != "" ]]; then
        BUS_IDS=(`echo ${VIDEO_IDS}`)
    fi

    if [[ ${VIDEO_DRIVERS} != "" ]]; then
        DRIVERS=(`echo ${VIDEO_DRIVERS}`)
    fi

    for ((i=0; i < ${#BUS_IDS[@]}; i++)); do
        sed -e "s/CARD/$i/" \
            -e "s/BUS_ID/${BUS_IDS[i]}/" \
            -e  "s/DRIVER/${DRIVERS[i]}/" \
            ${TEXTS}/placas_xorg.txt >> $XORG_CONF
    done

    # Monitor section
    for ((i=0; i < ${#BUS_IDS[@]}; i++)); do
        # Default frequencies at $MDM_CONF
        # If HorizSync or VertRefresh are not in mdm.conf, don't write in xorg.conf
       if [[ ! -z ${HORIZ_SYNC[i]} ]]; then
    	    sed -e "s/ID/$i/" \
                -e "s/HORIZ_SYNC/HorizSync ${HORIZ_SYNC[i]}/" \
                -e "s/VERT_REFRESH/VertRefresh ${VERT_REFRESH[i]}/" \
                ${TEXTS}/monitor_xorg.txt >> $XORG_CONF
        else
    	    sed -e "s/ID/$i/" \
                -e "/HORIZ_SYNC/d" \
                -e "/VERT_REFRESH/d" \
                ${TEXTS}/monitor_xorg.txt >> $XORG_CONF
	fi
   done

    # Screen section
    for ((i=0; i < ${#BUS_IDS[@]}; i++)); do
        sed -e "s/ID/$i/" \
            -e "s/DEFAULT_DEPTH/${DEFAULT_DEPTH[i]}/" \
            -e "s/SCREEN_MODES/${SCREEN_MODES[i]}/" \
            ${TEXTS}/screen_xorg.txt >> $XORG_CONF
    done

    # Server Layout section
    AUX=""
    for ((i=1; i < ${#BUS_IDS[@]}; i++)); do
        AUX="${AUX}\tScreen    $i  \"Screen $i\"\n"
    done

    sed -e "/BSCREENS/,/ESCREENS/c\ ${AUX}" \
        ${TEXTS}/server_layout_xorg.txt >> $XORG_CONF

    write_debug "Exiting generate_xorg_conf()"

} # generate_xorg_conf()

function kbd_options(){
    if [[ HEADS == 1 ]]; then
        KBD_RULES=xorg
        KBD_MODEL=abnt2
        KBD_LAYOUT=br
    else
        KBD_RULES=evdev
        KBD_MODEL=abnt2
        KBD_LAYOUT=br
    fi
} # kbd_options 

function cabecas(){
    
    write_debug "Entering cabecas()"
    # Heads = smaller(videocards, keyboards, mice);
    HEADS=${#BUS_IDS[@]}
    for temp in "${#MOUSE_PHYS[@]}" "${#KBD_PHYS[@]}"; do
        (( "$temp" < "$HEADS" )) && HEADS=$temp
    done

    if [[ $HEADS = 0 ]]; then
        HEADS=1
    fi
} # cabecas

function monitor(){

    # Set default frequencies as edid for each card
    for ((i=0; i < ${#BUS_IDS[@]}; i++)); do
        HORIZ_SYNC[i]=${HORIZSYNC[i+1]}
        VERT_REFRESH[i]=${VERTREFRESH[i+1]}
        DEFAULT_DEPTH[i]=${DEPTH[i+1]}
        SCREEN_MODES[i]="\"${RESOLUTION[i+1]}\""
        SCREEN_GEOMETRY[i]="\"${RESOLUTION[j]}+0+0\""
        write_debug "monitor[$i]: HS=${HORIZ_SYNC[i]}; VR=${VERT_REFRESH[i]}"\
                    "SM=${SCREEN_MODES[i]}; SG=${SCREEN_GEOMETRY[i]}"
    done
} # monitor

function devices_conf(){

    AUX=`$DISCOVER_HEADS kbd | cut -f2` 
    KBD_PHYS=($(echo $AUX))

    AUX=`$DISCOVER_HEADS mouse | cut -f2` 
    MOUSE_PHYS=($(echo $AUX))

    AUX=`$DISCOVER_HEADS bus | cut -f2` 
    BUS_IDS=($(echo $AUX))

    AUX=`$DISCOVER_HEADS driver | cut -f2` 
    DRIVERS=($(echo $AUX))

    AUX=`$DISCOVER_HEADS kevent | cut -f2` 
    KBD_EVENT=($(echo $AUX))

    AUX=`$DISCOVER_HEADS mevent | cut -f2` 
    MOUSE_EVENT=($(echo $AUX))

    cabecas
    monitor
} # devices_conf

#******************** MAIN *******************
# Force option copies the file to a backup
if [[ -z $DEBUG_MULTISEAT ]]; then
    DEBUG_MULTISEAT=0                       # no debug function
fi
if [[ -z $ENABLE_MULTISEAT ]]; then
    ENABLE_MULTISEAT=1
fi
if [[ ! ENABLE_MULTISEAT ]]; then
    exit 0
fi
write_debug "Starting create_xorg_conf() \$1=$1"
case $1 in

    force)
        mv -f $XORG_CONF ${XORG_CONF}.bak
        devices_conf
        kbd_options
        generate_xorg_conf
        exit
        ;;	
	*)
        verify_xorg_conf
        devices_conf
        kbd_options
        generate_xorg_conf
        ;;
esac
write_debug "Exiting create_xorg_conf()"
