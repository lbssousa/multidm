#!/bin/bash
#
# Copyright (C) 2004-2008 Centro de Computacao Cientifica e Software Livre
# Departamento de Informatica - Universidade Federal do Parana - C3SL/UFPR
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.
 
 
#**********************************
#
#  Script Version: 2.0.1
#                  29/01/2008
#  Dependencies:
#       mdm-path.inc
#       mdm-debug.inc
#       mdm-hardware.inc
#       mdm-util.inc
#       mdm-links.inc
#       mdm-images.inc
#       mdm-execute.inc
#       XephyrLoader
#       mdm.conf
 
 # script version
 VERSION=2.0.1
 
 # include files path
 INCLUDE=/usr/share/mdm/include
 
 export TEXTDOMAINDIR=/usr/share/locale
 export TEXTDOMAIN=multiseat-xephyr

 source ${INCLUDE}/mdm-debug.inc
 source ${INCLUDE}/mdm-path.inc
 source ${INCLUDE}/mdm-hardware.inc
 source ${INCLUDE}/mdm-images.inc
  
 source ${CONFIG_FILE}
 source ${INCLUDE}/mdm-util.inc
 source ${INCLUDE}/mdm-links.inc
 source ${INCLUDE}/mdm-execute.inc


# 
# This function check if user is root
#
# Parameters:   none

function NeedRoot()
{
    # check root
    if [[ `IsRoot` != "1" ]]; then
        echo $"Warning: Only root can execute this script!"
        exit 1
    fi
} # NeedRoot

#
# function to start a single head system
#
# Parameters:   none

function OneHead()
{
    case ${DISPLAY_MANAGER} in
        gdm)
            WriteDebug $"Local server, gdm, one head."

            # add standard server to gdm
            ${GDMDynamic} "-a 0=StandardHandled"

            # run server 0
            ${GDMDynamic} "-r 0"
            ;;
        remote)
            WriteDebug $"Remote server, one head. Query: ${QUERY_COMMAND}"
                
            # run X server
            ${X} -query ${QUERY_COMMAND} \
                 -config ${XORG_MDM} 2> ${LOG_DIR}/X.log &
                
            # get X PID
            local PID=$!
                
            # store for future use in ExecStop()
            echo ${PID} > ${PIDS}/X.pid
                
            # wait for X 
            wait ${PID}
                
            # delete PID (we don't need it anymore)
            rm -f ${PIDS}/X.pid
            ;;
        *)
            WriteDebug "OneHead(): Invalid Display Manager: ${DISPLAY_MANAGER}"
            exit 2
            ;;
    esac
        
} # OneHead

#
# This function set up heads
#
# Parameters:   number of heads to load

function SetHeads()
{
    # number of heads to load
    local HEADS=${1}
    
    # number of local head
    local HEAD
    
    # set up every head
    for (( HEAD=1; HEAD <= HEADS; HEAD++ )); do
        # associate one display with this head
        export DISPLAY=:0.$(( HEAD - 1 ))
                
        # configure and display current head
        ${MDMService} ${HEAD} &
        
        # get the PID
        local PID=$!
        
        # store for future use in ExecStop()
        echo ${PID} > ${PIDS}/mdm-service_${HEAD}.pid
    
    done

} # SetHeads

#
# Function to start multihead system
#
# Parameters:   number of heads to setup

function MultiHead()
{

    # number of heads to setup
    local HEADS=${1}

    # check connection type
    case ${DISPLAY_MANAGER} in
        gdm)
            WriteDebug $"Local connection, multihead, gdm"
            
            # add standard server to gdm
            ${GDMDynamic} "-a 0=StandardNotHandled"
            
            # run the server
            ${GDMDynamic} "-r 0"
            
            # wait server load
            sleep 4
            
            # setup heads
            SetHeads ${HEADS}
            ;;
        remote)
            WriteDebug $"Remote connection, multihead. Query: ${QUERY_COMMAND}"
            
            # run X server
            ${X} -br \
                 -noreset \
                 -dpi 92 \
                 -config ${XORG_MDM} 2> ${LOG_DIR}/X.log &
            
            # get X PID
            local PID=$!
            
            # store for future use in ExecStop()
            echo ${PID} > ${PIDS}/X.pid
            
            # wait for X
            sleep 6
            
            # Make a Xauthority file
            xauth -f ${XAUTH_FILE} generate :0
            
            # set new Xauthority
            export XAUTHORITY=${XAUTH_FILE}
            
            # setup heads
            SetHeads ${HEADS}
            ;;
        *)
            WriteDebug "MultiHead(): Invalid Display Manager: ${DISPLAY_MANAGER}"
            exit 2
            ;;
    esac
} # MultiHead

#
# This function start mdm system
#
# Parameters:   number of heads to setup

function ExecStart()
{
    # root is needed
    NeedRoot
    
    # mdm PID file
    local PID_FILE=${PIDS}/mdm.pid
    
    # check if mdm is running
    if [[ -f ${PID_FILE} ]]; then
        echo -e $"Found PID file. Is mdm running?"
        echo -e $"Please, verify ${PID_FILE}"
        exit 2
    fi
      
    # number of heads to setup
    local HEADS=${1}
    
    # files to be deleted     
    local EXCLUDE
    
    # links to keyb and mouse will be created?
    if [[ ${LINK_CREATION_MODE} == "always" ]]; then
        # delete old links
        for EXCLUDE in `ls ${LINK_DIR} | grep "^mdm"`; do
            rm -f ${LINK_DIR}/${EXCLUDE}
        done
    fi
            
    # delete old PID files
    for EXCLUDE in `ls ${PIDS}`; do
        rm -f ${PIDS}/${EXCLUDE}
    done
    
    # setup only one head?        
    if [[ ${HEADS} == 1 ]]; then
        OneHead
    else
        MultiHead ${HEADS}
    fi
 
} # ExecStart

#
# This function read a PID number from a file, kill process pointed by PID and
# finally delete the file.
#
# Parameters:   file name that contains PID. Carets are allowed.
#

function StopPID()
{
    local FILES=${1}
    local STOP
    
    for STOP in `ls ${PIDS}/${FILES} 2> null`; do
        local PID=`cat ${STOP}`
        # check if process was killed
        if ! kill -TERM ${PID}; then
            WriteDebug "Warning: ${STOP%%_*} still running!"
        fi
        rm -f ${STOP}
    done

} # StopPID

#
# This function stop mdm running service
#
# Parameters:   none

function ExecStop()
{

    local STOP
   
    # kill mdm-service
    StopPID "mdm-service_*.pid"

    # kill Xephyr
    StopPID "Xephyr_*.pid"
        
    # kill X server
    StopPID "X.pid"
    
} # ExecStop

#
# this function forces system mdm to stop
#
# Parameters:   none

function ExecForceStop() 
{

    local STOP
        
    # kill mdm-service
    for STOP in `pidof ${MDMService}`; do 
        kill -TERM ${STOP}
    done
    
    # kill GDMDynamic
    for STOP in `pidof ${GDMDynamic}`; do
        kill -TERM ${STOP}
    done
    
    # kill Xephyr
    for STOP in `pidof ${Xephyr}`; do
        kill -TERM ${STOP}
    done
   
    # kill X server
    for STOP in `pidof ${X}`; do
        kill -TERM ${STOP}
    done

    # delete PID files
    for STOP in `ls ${PIDS}/*.pid`; do
        rm -f ${STOP}
    done
    
} # ExecForceStop

#
# Main
#
# Parameters:   command line

function Main()
{
    # job to do
    local JOB=${1}
    
    # creates necessary directories
    InitSystem
    
    # number of heads
    local HEADS=`NumHeads`
    
    # check if display manager is defined. If no, assumes "gdm"
    if [[ -z "${DISPLAY_MANAGER}" ]]; then
        DISPLAY_MANAGER="gdm"
    fi
    
    # check if remote server is defined. If no, assumes "xdmcpserver"
    if [[ -z "${QUERY_COMMAND}" ]]; then
        QUERY_COMMAND="xdmcpserver"
    fi
    
    # parse command line arguments
    case ${JOB} in
        # show informations about keyboards, mice and video boards
        info)
            # show the copyright
            MDMCopyright

            # get the hardware list
            local KEYB=`Keyboards | wc -l`
            local MICE=`Mice | wc -l`
            local VIDEO=`VideoCards driver | wc -l`
            local HEADS=`NumHeads`
            
            echo -e $"Keyboard:\t${KEYB}"
            echo -e $"Mouse:\t${MICE}"
            echo -e $"Video:\t${VIDEO}"
            echo
            if [[ ${HEADS} -eq 1 ]]; then
                echo -e $"Single head system."
            else
                echo -e $"Multiseat with ${HEADS} heads."
            fi
            ;;
        # starts a multiseat system
        start)
            # show the copyright
            MDMCopyright
            
            # starts all the heads
            ExecStart ${HEADS}
            ;; 
        # stop mdm system using PID files
        stop)
            # show the copyright
            MDMCopyright
            
            # stop running system
            ExecStop
            ;;
        # stop mdm system using PIDOF to locate all running scripts
        force)
            # show the copyright
            MDMCopyright
            
            # force mdm to stop 
            ExecForceStop
            ;;
        # kill a specific head, reconfiguring again
        reconfig)
            # show the copyright
            MDMCopyright
 
            # head to be configured
            local TERMINAL=${2}
            
            if [[ -z "${TERMINAL}" ]]; then
                echo $"Please, inform the head number to be reconfigured."
                exit 1
            fi
            
            # PID file for head to be reconfigured
            local XEPHYR_TO_KILL="mdm-service_${TERMINAL}.pid"
            
            # verifies if head is running
            if [[ ! -f ${PIDS}/${XEPHYR_TO_KILL} ]]; then
                echo $"Invalid head or head not found: ${TERMINAL}"
                exit 1
            fi
            
            # stop the mdm-service
            StopPID "${XEPHYR_TO_KILL}"
            
            # stop Xephyr
            StopPID "Xephyr_:0.$(( TERMINAL - 1 )).pid"
            
            # remove keyboard and mouse links assigned to this head
            rm -f ${LINK_DIR}/mdm{Kbd,Mouse}${TERMINAL}
            
            # export display
            export DISPLAY=:0.$(( TERMINAL - 1 ))
                
            # restart the head
            ${MDMService} ${TERMINAL} &
        
            # get new PID
            local PID=$!
        
            # saves PID
            echo ${PID} > ${PIDS}/mdm-service_${TERMINAL}.pid
            ;;
        *)
            # show the copyright
            MDMCopyright
            
            # information about usage mode
            echo -e $"Invalid parameter. Please, use:"
            echo -e $"\tmdm start|stop|force|reconfig <head>|info"
            ;;
    esac
    echo
}
 
 
# script entry point

    Main ${1}
    
    exit 0
