#!/bin/bash
#
# Copyright (C) 2004-2008 Centro de Computacao Cientifica e Software Livre
# Departamento de Informatica - Universidade Federal do Parana - C3SL/UFPR
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
# USA.
 
 
#**********************************
#
#  Script Version: 2.0.1
#                  30/01/2008
#  Dependencies:
#       mdm-path.inc
#       mdm-debug.inc
#       mdm-links.inc
#       mdm.conf
 
 INCLUDE=/usr/share/mdm/include

export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=multiseat-xephyr

source ${INCLUDE}/mdm-path.inc

source ${CONFIG_FILE}
source ${INCLUDE}/mdm-debug.inc
source ${INCLUDE}/mdm-util.inc
source ${INCLUDE}/mdm-hardware.inc

DEBUG_FILE=CreateXorgConf.log

#
# This function create xorg.conf.mdm
#
# Parameters:   none
#

function CreateXorgConf()
{
    WriteDebug $"Entering CreateXorgConf"
    
    # number of heads to be configurated
    local HEADS=`NumHeads`
    
    WriteDebug $"Total heads detected: ${HEADS}"
    
    # set static section for xorg.conf 
    cat ${TEXT_DIR}/static_xorg.txt > ${XORG_MDM}
    
    # set server flags for mono or multihead
    if [[ ${HEADS} -eq 1 ]]; then
        cat ${TEXT_DIR}/one_head_xorg.txt >> ${XORG_MDM}
    else
        cat ${TEXT_DIR}/multi_head_xorg.txt >> ${XORG_MDM}
    fi
    
    #***********************************
    # Mouse Configuration Section
    #***********************************
    
    WriteDebug $"Starting mouse section"
    local FIRST_MOUSE=`Mice | head -1 | cut -f 2`
    
    # verify mouse protocol to be used
    if [[ `echo ${FIRST_MOUSE} | egrep -q "^serial[0-9]$"` ]]; then
        # serial mouse protocol
        sed -e "s/PROTOCOL/Microsoft/" \
            -e "s/DEVICE/\/dev\/ttyS${FIRST_MOUSE:6:1}/" \
            ${TEXT_DIR}/mouse_xorg.txt >> ${XORG_MDM}
    else
        # PS/2 protocol
        sed -e "s/PROTOCOL/ImPS\/2/" \
            -e "s/DEVICE/\/dev\/input\/mice/" \
            ${TEXT_DIR}/mouse_xorg.txt >> ${XORG_MDM}
    fi
    
    #***********************************
    # Keyboard Configuration Section
    #***********************************
    
    WriteDebug $"Starting keyboard section"
    
    if [[ ${HEADS} -eq 1 ]]; then
        # for one head, user xorg protocol
        local KBD_RULES=xorg
    else
        # for multihead, use evdev protocol
        local KBD_RULES=evdev
    fi
    
    # set keyboard configuration to Brazilian ABNT2.
    # TODO: International Keyboards Layout
    local KBD_MODEL=abnt2
    local KBD_LAYOUT=br
    
    # set keyboard configuration
    sed -e "s/KBD_RULES/${KBD_RULES}/" \
        -e "s/KBD_MODEL/${KBD_MODEL}/" \
        -e "s/KBD_LAYOUT/${KBD_LAYOUT}/" \
        ${TEXT_DIR}/keyboard_xorg.txt >> ${XORG_MDM}
        
    #***********************************
    # Video Configuration Section
    #*********************************** 
    
    WriteDebug $"Starting video boards section"
    
    local BUS_IDS=(`VideoCards bus`)
    local DRIVERS=(`VideoCards driver`)
    
    # associate every physical device with one driver
    for (( i=0; i < ${#BUS_IDS[@]}; i++ )); do
        sed -e "s/CARD/${i}/" \
            -e "s/BUS_ID/${BUS_IDS[i]}/" \
            -e "s/DRIVER/${DRIVERS[i]}/" \
            ${TEXT_DIR}/devices_xorg.txt >> ${XORG_MDM}
    done 
    
    #***********************************
    # Monitor Configuration Section
    #***********************************
   
    WriteDebug $"Starting monitor section"
    
    # set HSYNC and VREFRESH for every monitor in system
    for (( i=1; i <= ${#BUS_IDS[@]}; i++ )); do
        # if horizontal sync or vertical refresh are not defined, 
        # delete them from xorg.conf.mdm
        if [[ -z ${HORIZSYNC[i]} || -z ${VERTREFRESH[i]} ]]; then
            sed -e "s/ID/$((i-1))/" \
                -e "/HORIZ_SYNC/d" \
                -e "/VERT_REFRESH/d" \
                ${TEXT_DIR}/monitor_xorg.txt >> ${XORG_MDM}
        # else, if they are defined, set them.
        else
            sed -e "s/ID/$((i-1))/" \
                -e "s/HORIZ_SYNC/HorizSync\t${HORIZSYNC[i]}/" \
                -e "s/VERT_REFRESH/VertRefresh\t${VERTREFRESH[i]}/" \
                ${TEXT_DIR}/monitor_xorg.txt >> ${XORG_MDM}
        fi
    done
    
    #***********************************
    # Screen Configuration Section
    #***********************************
    
    WriteDebug $"Starting screen section"
    
    # set video resolution and color depth
    for (( i=1; i <= ${#BUS_IDS[@]}; i++ )); do
        sed -e "s/ID/$((i-1))/" \
            -e "s/DEFAULT_DEPTH/${DEPTH[i]}/" \
            -e "s/SCREEN_MODES/${RESOLUTION[i]}/" \
            ${TEXT_DIR}/screen_xorg.txt >> ${XORG_MDM}
    done
    
    #***********************************
    # Layout Configuration Section
    #***********************************       

    WriteDebug $"Starting Server Layout Section"
    
    local SCREENS=""
    
    for (( i=1; i < ${#BUS_IDS[@]}; i++ )); do   
        SCREENS="${SCREENS}\tScreen    ${i}   \"Screen ${i}\"\n"
    done
    
    sed -e "/BSCREENS/,/ESCREENS/c\ ${SCREENS}" \
        ${TEXT_DIR}/server_layout_xorg.txt >> ${XORG_MDM}
        
    WriteDebug $"Exiting CreateXorgConf"
} # CreateXorgConf

#
# Start mdm system environment, creating vars that was not defined in 
# configuration file (mdm.conf)
#
# Parameters:   first argument from command line 
#                   * force     forces creation of (overwrite) xorg.conf.mdm
#
 
function InitEnvironment() 
{

    # verify creation mode to create xorg.conf.mdm
    if [[ -z "${CREATE_XORG_MODE}" ]]; then
        CREATE_XORG_MODE="once"
    fi
    
    if [[ ! -z "${1}" ]]; then
        case $1 in
            force)
                CREATE_XORG_MODE="always"
                ;;
            start|stop)
                ;;
            *)
                echo -e $"Syntax: create-xorg-conf [force]"
                ;;
        esac
    fi
    
    # check init vars up to 8 heads
    for (( i=1; i < 9; i++ ))
    do
        # default resolution for every head
        if [[ -z "${RESOLUTION[$i]}" ]]; then
            RESOLUTION[$i]="1024x768"
        fi
        
        # default color depth
        if [[ -z "${DEPTH[$i]}" ]]; then
            DEPTH[$i]="24"
        fi
        
        # default horizontal sync
        if [[ -z "${HORIZSYNC[$i]}" ]]; then
            HORIZSYNC[$i]=""    #TODO: to find a standard value
        fi
        
        # default vertical refresh
        if [[ -z "${VERTREFRESH[$i]}" ]]; then
            VERTREFRESH[$i]=""  #TODO: to find a standard value
        fi
    done
} # InitEnvironment

#
# This function check if must create or not create the file xorg.conf.mdm
#
# Parameters:   none
#

function CheckXorgMode()
{
    case ${CREATE_XORG_MODE} in
        once)
            # xorg.conf.mdm already exists?
            if [[ -f "${XORG_MDM}" ]]; then
                exit 0
            fi
            ;;
        always)
            return 
            ;;
        *)
             WriteDebug $"Invalid value in CREATE_XORG_MODE." \
                        $"Please, verify ${CONFIG_FILE}"
             exit 1
             ;;
    esac
} # CheckXorgMode

#
# Main function
function Main()
{

    # check if is root
    if [[ `IsRoot` != "1" ]]; then
        echo $"Warning: Only root can execute this script!"
        exit 1
    fi

    # init mdm system
    InitSystem
    
    # init system environment
    InitEnvironment $1
    
    # check creation mode for xorg.conf.mdm
    CheckXorgMode 
    
    # write system log
    WriteLog $"creating xorg.conf.mdm"
    
    # finally, creates xorg.conf.mdm
    CreateXorgConf
    
} # Main


# script entry point

    Main $1
    
    exit 0
